import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            // Required for the curseforge task
            name = "gradle"
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.0.11"
        classpath "se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.55"
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'

ext.config = parseConfig(file('build.properties'))
ext.privFile = file('private.properties')
ext.priv = parseConfig(privFile)


version="${config.mc_version}-${config.mod_version}"
group= config.mod_group
archivesBaseName = config.mod_archive_base_name

if (System.getenv().BUILD_NUMBER != null) {
    version += ".${System.getenv().BUILD_NUMBER}"
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

minecraft {
    version = "${config.mc_version}-${config.forge_version}"
    runDir = "run"

    mappings = config.mappings_version
    makeObfSourceJar = false

    replaceIn config.mod_ref_file_loc
    replace "mod_version", project.version
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task devJar(type: Jar, dependsOn: 'classes') {
    logMsg("Generating $config.mod_name dev jar...", false)
    from(sourceSets.main.output) {
        include '**'
    }

    extension = 'jar'
    classifier = 'dev'
}

artifacts {
    archives devJar
}

static def parseConfig(File config) {
    if(config.exists()){
        config.withReader {
            def prop = new Properties()
            prop.load(it)
            return (new ConfigSlurper().parse(prop))
        }
    }else{
        return null;
    }
}

curseforge{
    if(priv != null){
        apiKey = priv.cf_key
        project {
            id = priv.cf_id
            releaseType = config.mod_release_type
            changelogType = 'text'
            changelog = "Changelog available at https://mc.dylangore.ie/blocksplus/changelog"
            addArtifact devJar
        }
        logMsg("Build artifact(s) uploading to CurseForge...", false)
    }else{
        logMsg("priavte.properties file not found!\nNothing will be uploaded to CurseForge.", true)
        return
    }
}

task makeChangelog(type: GitChangelogTask) {
    logMsg("Generating $config.mod_name changelog...", false)
    file = new File("build/libs/${project.archivesBaseName}-${project.version}-changelog.html")
    untaggedName = "Current release ${project.version}"
    templateContent = "${config.changelog_html}"
}

def logMsg(String msg, boolean bigMsg){
    if(bigMsg){
        project.logger.lifecycle("-------------------------------------------------")
        project.logger.lifecycle(msg)
        project.logger.lifecycle("-------------------------------------------------")
    }else{
        project.logger.lifecycle(msg)
    }
}
