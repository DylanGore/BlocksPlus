buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: "curseforge"
apply plugin: 'forge'

//Load Properties File
ext.configFile = file "build.properties"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = config.modVersion
group = config.modGroup
archivesBaseName = config.modArchiveName

minecraft {
    version = config.minecraftVersion + "-" + config.forgeVersion
    assetDir = "run/assets"

    replaceIn "Reference.java"
    replace "@VERSION@", "${project.version}.${System.getenv("BUILD_NUMBER") ?: 0}"
}

version = "${config.minecraftVersion}-${config.modVersion}.${System.getenv("BUILD_NUMBER") ?: 0}"

jenkins {
    job = '${config.jobName}'
}

curse {
    apiKey = project.curseKey // saved in my gradle.properties file.  http://minecraft.curseforge.com/my-api-tokens
    projectId = "${config.curseId}"
    releaseType = "alpha"
	changelog = "${config.curseChangelog}"

    // the default obfuscated jar is uploaded by default
    // artifact = project.file("some/jar/to/upload.jar")

    // allows you to add extra compatible MC versions. The one specified in the minecraft{} block is used by default.
    // addGameVersion "1.7.1"
    // addGameversion "1.7.0", "1.7.4"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
    }
    classifier = 'universal'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

// add a source jar
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

import net.minecraftforge.gradle.delayed.*
import net.minecraftforge.gradle.tasks.dev.ChangelogTask

task createChangelog(type: ChangelogTask) {

    if (("${System.getenv().JOB_NAME}" != null) && project.hasProperty("jenkins_server") && project.hasProperty("jenkins_password")) {
        def jobName = "${System.getenv().JOB_NAME}"
        def buildNumber = "${System.getenv().BUILD_NUMBER}"

        setServerRoot(new DelayedString(project, project.jenkins_server))
        setJobName(new DelayedString(project, jobName.toString()))
        setAuthName(new DelayedString(project, project.jenkins_user))
        setAuthPassword(new DelayedString(project, project.jenkins_password))
        setTargetBuild({ buildNumber.toString() });
        setOutput(new DelayedFile(project, 'build/libs/' + project.getName() + '-' + project.version + '-changelog.txt'));
    }

    onlyIf {
        return (("${System.getenv().JOB_NAME}" != null) && project.hasProperty("jenkins_server") && project.hasProperty("jenkins_password"))
    }
}

tasks.build.dependsOn('createChangelog')