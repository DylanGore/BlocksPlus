import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
plugins {
    id 'com.matthewprenger.cursegradle' version '1.3.0'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.61'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

ext.priv = parseConfig(file('private.properties'))

version = "${mc_version}-${mod_version}"
group = "${mod_group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${mod_name}"

if (System.getenv().BUILD_NUMBER != null) {
    version += ".${System.getenv().BUILD_NUMBER}"
}

String forgeVersion = "${mc_version}-${forge_version}"
String forgeName = "net.minecraftforge:forge:${forgeVersion}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft forgeName
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "${mod_id}",
            "Specification-Vendor": "${mod_vendor}",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"${mod_vendor}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

//noinspection GroovyAssignabilityCheck
task devJar(type: Jar, dependsOn: 'classes') {
    logMsg("Generating ${mod_name} dev jar...", false)
    from(sourceSets.main.output) {
        include '**'
    }

    extension = 'jar'
    classifier = 'dev'
}

artifacts {
    archives devJar
}

static def parseConfig(File config) {
    if(config.exists()){
        config.withReader {
            def prop = new Properties()
            prop.load(it)
            return (new ConfigSlurper().parse(prop))
        }
    }else{
        return null
    }
}

curseforge{
    if(priv != null){
        apiKey = priv.cf_key
        project {
            id = priv.cf_id
            releaseType = "${mod_release_type}"
            changelogType = 'text'
            changelog = "Changelog from Github"
            addArtifact devJar
        }
        logMsg("Build artifact(s) uploading to CurseForge...", false)
    }else{
        logMsg("priavte.properties file not found!\nNothing will be uploaded to CurseForge.", true)
        return
    }
}

//noinspection GroovyAssignabilityCheck
task makeChangelog(type: GitChangelogTask) {
    logMsg("Generating ${mod_name} changelog...", false)
    file = new File("build/libs/${project.archivesBaseName}-${project.version}-changelog.html")
    untaggedName = "Current release ${project.version}"
    templateContent = "${changelog_html}"
}

def logMsg(String msg, boolean bigMsg){
    if(bigMsg){
        project.logger.lifecycle("-------------------------------------------------")
        project.logger.lifecycle(msg)
        project.logger.lifecycle("-------------------------------------------------")
    }else{
        project.logger.lifecycle(msg)
    }
}